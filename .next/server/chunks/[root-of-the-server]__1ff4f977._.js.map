{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/auth/verify/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const authHeader = request.headers.get('authorization');\n    const token = authHeader?.split(' ')[1];\n\n    if (!token) {\n      return NextResponse.json(\n        { error: 'Token de acesso requerido' },\n        { status: 401 }\n      );\n    }\n\n    // Simular verificação de token (substitua pela lógica real do seu backend)\n    if (token.startsWith('mock_token_')) {\n      const mockUser = {\n        id: 'user_123',\n        name: 'Usuário Teste',\n        email: 'teste@colombia.com'\n      };\n\n      return NextResponse.json({ user: mockUser });\n    }\n\n    return NextResponse.json(\n      { error: 'Token inválido' },\n      { status: 403 }\n    );\n\n  } catch (error) {\n    console.error('Verify error:', error);\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;QACvC,MAAM,QAAQ,YAAY,MAAM,IAAI,CAAC,EAAE;QAEvC,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA4B,GACrC;gBAAE,QAAQ;YAAI;QAElB;QAEA,2EAA2E;QAC3E,IAAI,MAAM,UAAU,CAAC,gBAAgB;YACnC,MAAM,WAAW;gBACf,IAAI;gBACJ,MAAM;gBACN,OAAO;YACT;YAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,MAAM;YAAS;QAC5C;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiB,GAC1B;YAAE,QAAQ;QAAI;IAGlB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}
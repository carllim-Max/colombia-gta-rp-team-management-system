{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email, password } = await request.json();\n\n    // Validação básica\n    if (!email || !password) {\n      return NextResponse.json(\n        { error: 'Email e senha são obrigatórios' },\n        { status: 400 }\n      );\n    }\n\n    // Simular verificação de credenciais (substitua pela lógica real do seu backend)\n    // Para teste, aceita qualquer email/senha\n    const mockUser = {\n      id: `user_${Date.now()}`,\n      name: 'Usuário Teste',\n      email\n    };\n\n    // Simular token JWT (substitua pela lógica real do seu backend)\n    const mockToken = `mock_token_${Date.now()}`;\n\n    return NextResponse.json({\n      token: mockToken,\n      user: mockUser\n    });\n\n  } catch (error) {\n    console.error('Login error:', error);\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE9C,mBAAmB;QACnB,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiC,GAC1C;gBAAE,QAAQ;YAAI;QAElB;QAEA,iFAAiF;QACjF,0CAA0C;QAC1C,MAAM,WAAW;YACf,IAAI,CAAC,KAAK,EAAE,KAAK,GAAG,IAAI;YACxB,MAAM;YACN;QACF;QAEA,gEAAgE;QAChE,MAAM,YAAY,CAAC,WAAW,EAAE,KAAK,GAAG,IAAI;QAE5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,MAAM;QACR;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}